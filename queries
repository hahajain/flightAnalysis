from pyspark.sql import SparkSession
from pyspark.sql import functions as F
df = spark.read.format("csv").option("header","true").option("mode","DROPMALFORMED").load("all_flights.csv")
df = df.withColumn("Route", F.concat(F.col("ORIGIN"),F.lit('-'), F.col("DEST")))

val df = spark.read.format("csv").option("header","true").option("mode","DROPMALFORMED").load("all_flights.csv")

#1
df.agg(F.min("DISTANCE"), F.max("DISTANCE")).collect()

#2
df.groupBy('FL_DATE').count().orderBy('count', ascending = False).show()    
                                                    
#3
df = df.withColumn(“TOTAL_DELAY”, F.col(“ARR_DELAY”) - F.col(“DEP_DELAY”))    
df1=df.where(F.col("TOTAL_DELAY")>0)
df1.groupBy("CARRIER").agg(F.count("TOTAL_DELAY").alias("Count"))

#4
df.createOrReplaceTempView("AIRLINECOUNTS")
df2 = spark.sql("SELECT CARRIER, count(CARRIER) as Operated_flights FROM AIRLINECOUNTS group by CARRIER");
df3=df2.agg(F.max("Operated_flights").alias("cnt"))
df2.join(df3, df3.cnt==df2.Operated_flights).drop("cnt").show()

#5
df = df.withColumn('ROUTE', F.concat(F.col("ORIGIN"), F.lit("-"), F.col("DEST")))
df2=df.where(F.col("CANCELLED")==1).groupBy("ROUTE").agg(F.count("CANCELLED").alias("Cancelled_count"))
df3=df2.agg(F.max("Cancelled_count").alias("cnt"))
df2.join(df3, df3.cnt==df2.Cancelled_count).drop("cnt").show()

#6     
df1=df.groupBy("CARRIER").agg(F.sum("CANCELLED").alias("Count"))    
df2=df.groupBy("CARRIER").count().alias("Total")
df1.alias('a').join(df2.alias('b'),F.col('b.CARRIER') == F.col('a.CARRIER')).select(F.col('a.CARRIER'),(F.col('a.Count')/F.col('b.Total'))).show()    

#7
from pyspark.sql.functions import col
new_df = df_new.withColumn("TOTAL_DELAY", col("ARR_DELAY) - col("DEP_DELAY"))

#Add column "ROUTE" by concatenating "ORIGIN" and "DEST"
from pyspark.sql import functions as sf
new_df = new_df.withColumn('ROUTE', sf.concat(sf.col("ORIGIN"), sf.lit("-"), sf.col("DEST")))

#Groupby "ROUTE" and aggregate on sum of "TOTAL_DELAY"
new_df1 = new_df.groupBy("ROUTE").agg(sf.col("ROUTE"), sf.sum("TOTAL_DELAY"))

#Get max delays by sorting this new dataframe
new_df1.orderBy('sum(TOTAL_DELAY)', ascending = False).show()


